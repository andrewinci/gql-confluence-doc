extend type Query {
  name: String!

  "Get all nested objects"
  nested(in1: TestInput, in2: TestInput2): Nested

  union: SampleUnion @deprecated(reason: "Deprecation reason")
}

type Nested {
  "The id of a nested object"
  id: ID!
  "The name of the nested object"
  name: String! @deprecated
  sampleEnum: SampleEnum! @new
}

"This is a sample enum"
enum SampleEnum {
  "An A option"
  A
  "An B option"
  B @deprecated
  "An C option"
  C @new
}

type DeprecatedObject
  @deprecated(reason: "use another type instead. This is an old one.") {
  sample: [Nested!]!
}

# directive @deprecated(
#   reason: String
# ) on FIELD_DEFINITION | ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | ENUM | ENUM_VALUE | OBJECT | UNION

input TestInput @deprecated {
  nameInput: String!
}

input TestInput2 {
  nameInput: String!
}

union SampleUnion = Nested

type A @deprecated {
  aField: String!
}
type B {
  bField: String!
}
type C @new {
  cField: String!
}
